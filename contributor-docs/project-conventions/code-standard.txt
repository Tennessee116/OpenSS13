=== Code Standards ===

There are a few coding practices that should be followed, in order to seriously increase the chances of a patch being accepted.
Below is an example of an object, with comments to denote the preferred practices:

// In order to make decent use of screen-space, the object type should be in path notation, like below.
// Tabs should be 4 spaces wide. Multi-line comments should be multiples of // as an API tool is being
// developed that will make use of block comment-like syntax. Please put a space between // and text.
/mob/SomeDude
	// Comments should follow the same indentation rules as code. Preferably, inherited variables (like someVar) should be declared
	// before new variables, like otherVar. New variables should not be grouped under a var block. Preferably order variables by
	// type (inherited or new), then in alphabetical order. Unless it really doesn't make sense, default values should be provided.
	someVar = "Hello"
	var/life = 100
	var/otherVar = 2
	
	// Procedures do not always need to end in a return statement.
	// Use src, even if it is implied, like below.
	New()
		src.someVar = "Other"
	
	// New procedures should be like so, do not group them under a proc block. Where possible, declare 'as [type]' for procedure arguments,
	// if they are primitives (like text, num etc). BYOND does not enforce these, but it helps for readability.
	// Do not put var/ in front of arguments.	
	proc/SomeProc(atom/A as atom)
		// if statements should cause indentation. It is okay to place procedure calls in the expression of an if statement, provided
		// it doesn't have side-effects (that is, it modifies the objects it is operating on). The example below is fine, seen as it
		// just performing a check.
		if (!istype(A,/atom))
			// You should use [] to embed expressions into text strings, as opposed to text(). A lot of the current codebase will need
			// changing to comply with this.
			CRASH("Sanity Check: [A] is not an /atom")
